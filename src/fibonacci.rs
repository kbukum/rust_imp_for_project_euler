//! # [Even Fibonacci numbers](https://projecteuler.net/problem=2)
//! Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//! By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
/// A method to find sum of the even fibonacci numbers that are lower than the given value.
pub(crate) fn find_sum_of_even_fib_numbers() {
    let max_term_value = 4000000;
    let total_sum = sum_of_even_terms_of_fib((1, 2), max_term_value);
    println!("Total sum of the even fibonacci sequences that are lower than {} = {} ", max_term_value, total_sum);
}

fn sum_of_even_terms_of_fib(parameters: (u64, u64), max_term_value: u64) -> u64{
    let (mut previous_last_term, mut last_term) = parameters;

    let mut total_sum: u64 = 0;
    if previous_last_term % 2 == 0 && previous_last_term <= max_term_value {
        total_sum += previous_last_term
    }

    while last_term <= max_term_value  {
        if last_term % 2 == 0 {
            total_sum += last_term;
        }
        let new_last_term = previous_last_term + last_term;
        previous_last_term = last_term;
        last_term = new_last_term;
    }
    total_sum
}


#[cfg(test)]
mod tests {
    use crate::fibonacci::sum_of_even_terms_of_fib;

    #[test]
    fn find_sum_of_even_fib_numbers() {
        let max_term_value = 4000000;
        let total_sum = sum_of_even_terms_of_fib((1, 2), max_term_value);
        assert_eq!(4613732, total_sum);
    }
}

